// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/v1/node.proto

package nodev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodePlugin_Initialize_FullMethodName           = "/blackhole.plugin.node.v1.NodePlugin/Initialize"
	NodePlugin_Start_FullMethodName                = "/blackhole.plugin.node.v1.NodePlugin/Start"
	NodePlugin_Stop_FullMethodName                 = "/blackhole.plugin.node.v1.NodePlugin/Stop"
	NodePlugin_HealthCheck_FullMethodName          = "/blackhole.plugin.node.v1.NodePlugin/HealthCheck"
	NodePlugin_GetInfo_FullMethodName              = "/blackhole.plugin.node.v1.NodePlugin/GetInfo"
	NodePlugin_ListPeers_FullMethodName            = "/blackhole.plugin.node.v1.NodePlugin/ListPeers"
	NodePlugin_ConnectPeer_FullMethodName          = "/blackhole.plugin.node.v1.NodePlugin/ConnectPeer"
	NodePlugin_DisconnectPeer_FullMethodName       = "/blackhole.plugin.node.v1.NodePlugin/DisconnectPeer"
	NodePlugin_GetNetworkStatus_FullMethodName     = "/blackhole.plugin.node.v1.NodePlugin/GetNetworkStatus"
	NodePlugin_DiscoverPeers_FullMethodName        = "/blackhole.plugin.node.v1.NodePlugin/DiscoverPeers"
	NodePlugin_StreamPeerEvents_FullMethodName     = "/blackhole.plugin.node.v1.NodePlugin/StreamPeerEvents"
	NodePlugin_StreamNetworkMetrics_FullMethodName = "/blackhole.plugin.node.v1.NodePlugin/StreamNetworkMetrics"
)

// NodePluginClient is the client API for NodePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NodePlugin defines the complete interface for the node plugin
type NodePluginClient interface {
	// Lifecycle methods - specific to node plugin needs
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// P2P networking methods
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	ConnectPeer(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption) (*ConnectPeerResponse, error)
	DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerResponse, error)
	GetNetworkStatus(ctx context.Context, in *GetNetworkStatusRequest, opts ...grpc.CallOption) (*GetNetworkStatusResponse, error)
	DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersResponse, error)
	// Streaming methods for real-time updates
	StreamPeerEvents(ctx context.Context, in *StreamPeerEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PeerEvent], error)
	StreamNetworkMetrics(ctx context.Context, in *StreamNetworkMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkMetrics], error)
}

type nodePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePluginClient(cc grpc.ClientConnInterface) NodePluginClient {
	return &nodePluginClient{cc}
}

func (c *nodePluginClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, NodePlugin_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, NodePlugin_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, NodePlugin_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NodePlugin_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, NodePlugin_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, NodePlugin_ListPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) ConnectPeer(ctx context.Context, in *ConnectPeerRequest, opts ...grpc.CallOption) (*ConnectPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectPeerResponse)
	err := c.cc.Invoke(ctx, NodePlugin_ConnectPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) DisconnectPeer(ctx context.Context, in *DisconnectPeerRequest, opts ...grpc.CallOption) (*DisconnectPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectPeerResponse)
	err := c.cc.Invoke(ctx, NodePlugin_DisconnectPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) GetNetworkStatus(ctx context.Context, in *GetNetworkStatusRequest, opts ...grpc.CallOption) (*GetNetworkStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkStatusResponse)
	err := c.cc.Invoke(ctx, NodePlugin_GetNetworkStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) DiscoverPeers(ctx context.Context, in *DiscoverPeersRequest, opts ...grpc.CallOption) (*DiscoverPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverPeersResponse)
	err := c.cc.Invoke(ctx, NodePlugin_DiscoverPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodePluginClient) StreamPeerEvents(ctx context.Context, in *StreamPeerEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PeerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodePlugin_ServiceDesc.Streams[0], NodePlugin_StreamPeerEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPeerEventsRequest, PeerEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodePlugin_StreamPeerEventsClient = grpc.ServerStreamingClient[PeerEvent]

func (c *nodePluginClient) StreamNetworkMetrics(ctx context.Context, in *StreamNetworkMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetworkMetrics], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NodePlugin_ServiceDesc.Streams[1], NodePlugin_StreamNetworkMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamNetworkMetricsRequest, NetworkMetrics]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodePlugin_StreamNetworkMetricsClient = grpc.ServerStreamingClient[NetworkMetrics]

// NodePluginServer is the server API for NodePlugin service.
// All implementations must embed UnimplementedNodePluginServer
// for forward compatibility.
//
// NodePlugin defines the complete interface for the node plugin
type NodePluginServer interface {
	// Lifecycle methods - specific to node plugin needs
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// P2P networking methods
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	ConnectPeer(context.Context, *ConnectPeerRequest) (*ConnectPeerResponse, error)
	DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerResponse, error)
	GetNetworkStatus(context.Context, *GetNetworkStatusRequest) (*GetNetworkStatusResponse, error)
	DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersResponse, error)
	// Streaming methods for real-time updates
	StreamPeerEvents(*StreamPeerEventsRequest, grpc.ServerStreamingServer[PeerEvent]) error
	StreamNetworkMetrics(*StreamNetworkMetricsRequest, grpc.ServerStreamingServer[NetworkMetrics]) error
	mustEmbedUnimplementedNodePluginServer()
}

// UnimplementedNodePluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodePluginServer struct{}

func (UnimplementedNodePluginServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedNodePluginServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedNodePluginServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedNodePluginServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNodePluginServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedNodePluginServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedNodePluginServer) ConnectPeer(context.Context, *ConnectPeerRequest) (*ConnectPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectPeer not implemented")
}
func (UnimplementedNodePluginServer) DisconnectPeer(context.Context, *DisconnectPeerRequest) (*DisconnectPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectPeer not implemented")
}
func (UnimplementedNodePluginServer) GetNetworkStatus(context.Context, *GetNetworkStatusRequest) (*GetNetworkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkStatus not implemented")
}
func (UnimplementedNodePluginServer) DiscoverPeers(context.Context, *DiscoverPeersRequest) (*DiscoverPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPeers not implemented")
}
func (UnimplementedNodePluginServer) StreamPeerEvents(*StreamPeerEventsRequest, grpc.ServerStreamingServer[PeerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPeerEvents not implemented")
}
func (UnimplementedNodePluginServer) StreamNetworkMetrics(*StreamNetworkMetricsRequest, grpc.ServerStreamingServer[NetworkMetrics]) error {
	return status.Errorf(codes.Unimplemented, "method StreamNetworkMetrics not implemented")
}
func (UnimplementedNodePluginServer) mustEmbedUnimplementedNodePluginServer() {}
func (UnimplementedNodePluginServer) testEmbeddedByValue()                    {}

// UnsafeNodePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePluginServer will
// result in compilation errors.
type UnsafeNodePluginServer interface {
	mustEmbedUnimplementedNodePluginServer()
}

func RegisterNodePluginServer(s grpc.ServiceRegistrar, srv NodePluginServer) {
	// If the following call pancis, it indicates UnimplementedNodePluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodePlugin_ServiceDesc, srv)
}

func _NodePlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_ConnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).ConnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_ConnectPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).ConnectPeer(ctx, req.(*ConnectPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_DisconnectPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).DisconnectPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_DisconnectPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).DisconnectPeer(ctx, req.(*DisconnectPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_GetNetworkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).GetNetworkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_GetNetworkStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).GetNetworkStatus(ctx, req.(*GetNetworkStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_DiscoverPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePluginServer).DiscoverPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodePlugin_DiscoverPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePluginServer).DiscoverPeers(ctx, req.(*DiscoverPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodePlugin_StreamPeerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPeerEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodePluginServer).StreamPeerEvents(m, &grpc.GenericServerStream[StreamPeerEventsRequest, PeerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodePlugin_StreamPeerEventsServer = grpc.ServerStreamingServer[PeerEvent]

func _NodePlugin_StreamNetworkMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamNetworkMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodePluginServer).StreamNetworkMetrics(m, &grpc.GenericServerStream[StreamNetworkMetricsRequest, NetworkMetrics]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NodePlugin_StreamNetworkMetricsServer = grpc.ServerStreamingServer[NetworkMetrics]

// NodePlugin_ServiceDesc is the grpc.ServiceDesc for NodePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackhole.plugin.node.v1.NodePlugin",
	HandlerType: (*NodePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _NodePlugin_Initialize_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _NodePlugin_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _NodePlugin_Stop_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _NodePlugin_HealthCheck_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _NodePlugin_GetInfo_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _NodePlugin_ListPeers_Handler,
		},
		{
			MethodName: "ConnectPeer",
			Handler:    _NodePlugin_ConnectPeer_Handler,
		},
		{
			MethodName: "DisconnectPeer",
			Handler:    _NodePlugin_DisconnectPeer_Handler,
		},
		{
			MethodName: "GetNetworkStatus",
			Handler:    _NodePlugin_GetNetworkStatus_Handler,
		},
		{
			MethodName: "DiscoverPeers",
			Handler:    _NodePlugin_DiscoverPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPeerEvents",
			Handler:       _NodePlugin_StreamPeerEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamNetworkMetrics",
			Handler:       _NodePlugin_StreamNetworkMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/v1/node.proto",
}
